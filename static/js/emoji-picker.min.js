! function() {
    this.EmojiPicker = function() {
        function a(a) {
            var b, c;
            null == a && (a = {}), $.emojiarea.iconSize = null != (b = a.iconSize) ? b : 25, $.emojiarea.assetsPath = null != (c = a.assetsPath) ? c : "", this.generateEmojiIconSets(a), a.emojiable_selector || (a.emojiable_selector = "[data-emojiable=true]"), this.options = a
        }
        return a.prototype.discover = function() {
            if (!(/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream)) return $(this.options.emojiable_selector).emojiarea($.extend({
                emojiPopup: this,
                norealTime: !0
            }, this.options))
        }, a.prototype.generateEmojiIconSets = function(j) {
            let e = {},
                f = {},
                a, c, g, h, i, d, b = 0;
            for (; b < Config.EmojiCategories.length;) {
                for (d = Config.EmojiCategorySpritesheetDimens[b][1], a = 0; a < Config.EmojiCategories[b].length;) c = (g = Config.Emoji[Config.EmojiCategories[b][a]])[1][0], h = Math.floor(a / d), i = a % d, e[":" + c + ":"] = [b, h, i, ":" + c + ":"], f[c] = g[0], a++;
                b++
            }
            return $.emojiarea.icons = e, $.emojiarea.reverseIcons = f
        }, a.prototype.colonToUnicode = function(a) {
            return a ? (Config.rx_colons || Config.init_unified(), a.replace(Config.rx_colons, a => Config.mapcolon[a] || "")) : ""
        }, a.prototype.appendUnicodeAsImageToElement = function(g, d) {
            let b, f, e, c, a;
            if (!d) return "";
            for (Config.rx_colons || Config.init_unified(), e = d.split(Config.rx_codes), b = 0, f = e.length; b < f; b++) c = e[b], a = "", Config.rx_codes.test(c) ? (a = Config.reversemap[c]) && (a = ":" + a + ":", a = $.emojiarea.createIcon($.emojiarea.icons[a])) : a = document.createTextNode(c), g.append(a);
            return d.replace(Config.rx_codes, function(b) {
                return (a = Config.reversemap[b]) ? (a = ":" + a + ":", $.emojiarea.createIcon($.emojiarea.icons[a])) : ""
            })
        }, a.prototype.colonToImage = function(a) {
            return a ? (Config.rx_colons || Config.init_unified(), a.replace(Config.rx_colons, a => a ? $.emojiarea.createIcon($.emojiarea.icons[a]) : "")) : ""
        }, a
    }()
}();

(function() {
    // Initializes and creates emoji set from sprite sheet
    window.emojiPicker = new EmojiPicker({
        emojiable_selector: "[data-emojiable=true]",
        assetsPath: "/static/emoji-imgs/",
        popupButtonClasses: "fa fa-smile-o", // far fa-smile if you're using FontAwesome 5
    });

    // Finds all elements with `emojiable_selector` and converts them to rich emoji input fields
    // You may want to delay this step if you have dynamically created input fields that appear later in the loading process
    // It can be called as many times as necessary; previously converted input fields will not be converted again
    window.emojiPicker.discover();

    // Add event listener for Enter key press on the input field
    document.querySelectorAll('[data-emojiable=true]').forEach(function(input) {
        input.addEventListener('keypress', function(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                sendMessage();
                event.preventDefault(); // Prevent default behavior of adding new line
            }
        });
    });
})();

